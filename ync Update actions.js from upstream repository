[1mdiff --git a/src/agent/commands/actions.js b/src/agent/commands/actions.js[m
[1mindex 4b5177e..19b231e 100644[m
[1m--- a/src/agent/commands/actions.js[m
[1m+++ b/src/agent/commands/actions.js[m
[36m@@ -33,8 +33,10 @@[m [mexport const actionsList = [[m
         },[m
         perform: async function (agent, prompt) {[m
             // just ignore prompt - it is now in context in chat history[m
[31m-            if (!settings.allow_insecure_coding)[m
[32m+[m[32m            if (!settings.allow_insecure_coding) {[m[41m [m
[32m+[m[32m                agent.openChat('newAction is disabled. Enable with allow_insecure_coding=true in settings.js');[m
                 return 'newAction not allowed! Code writing is disabled in settings. Notify the user.';[m
[32m+[m[32m             }[m
             return await agent.coder.generateCode(agent.history);[m
         }[m
     },[m
[36m@@ -47,7 +49,7 @@[m [mexport const actionsList = [[m
             agent.actions.cancelResume();[m
             agent.bot.emit('idle');[m
             let msg = 'Agent stopped.';[m
[31m-            if (agent.self_prompter.on)[m
[32m+[m[32m            if (agent.self_prompter.isActive())[m
                 msg += ' Self-prompting still active.';[m
             return msg;[m
         }[m
[36m@@ -80,8 +82,8 @@[m [mexport const actionsList = [[m
         name: '!goToPlayer',[m
         description: 'Go to the given player.',[m
         params: {[m
[31m-            'player_name': { type: 'string', description: 'The name of the player to go to.' },[m
[31m-            'closeness': { type: 'float', description: 'How close to get to the player.', domain: [0, Infinity] }[m
[32m+[m[32m            'player_name': {type: 'string', description: 'The name of the player to go to.'},[m
[32m+[m[32m            'closeness': {type: 'float', description: 'How close to get to the player.', domain: [0, Infinity]}[m
         },[m
         perform: runAsAction(async (agent, player_name, closeness) => {[m
             return await skills.goToPlayer(agent.bot, player_name, closeness);[m
[36m@@ -91,24 +93,10 @@[m [mexport const actionsList = [[m
         name: '!followPlayer',[m
         description: 'Endlessly follow the given player.',[m
         params: {[m
[31m-            'player_name': { type: 'string', description: 'Name of the player to follow.' },[m
[31m-            'follow_dist': { type: 'float', description: 'The distance to follow from.', domain: [0, Infinity] }[m
[32m+[m[32m            'player_name': {type: 'string', description: 'name of the player to follow.'},[m
[32m+[m[32m            'follow_dist': {type: 'float', description: 'The distance to follow from.', domain: [0, Infinity]}[m
         },[m
         perform: runAsAction(async (agent, player_name, follow_dist) => {[m
[31m-            // Try to find the player with the given name[m
[31m-            let target = agent.bot.players[player_name]?.entity;[m
[31m-            if (!target) {[m
[31m-                // Fallback: try with the custom prefix from settings[m
[31m-                const altName = settings.player_prefix + player_name;[m
[31m-                target = agent.bot.players[altName]?.entity;[m
[31m-                if (target) {[m
[31m-                    console.log(`Could not find player "${player_name}". Using fallback name "${altName}".`);[m
[31m-                    player_name = altName;[m
[31m-                } else {[m
[31m-                    skills.log(agent.bot, `Could not find player ${player_name} (or ${settings.player_prefix}${player_name}).`);[m
[31m-                    return false;[m
[31m-                }[m
[31m-            }[m
             await skills.followPlayer(agent.bot, player_name, follow_dist);[m
         }, true)[m
     },[m
[36m@@ -187,16 +175,6 @@[m [mexport const actionsList = [[m
             'num': { type: 'int', description: 'The number of items to give.', domain: [1, Number.MAX_SAFE_INTEGER] }[m
         },[m
         perform: runAsAction(async (agent, player_name, item_name, num) => {[m
[31m-            // Fallback: if not found, try with the custom prefix from settings[m
[31m-            let playerObj = agent.bot.players[player_name];[m
[31m-            if (!playerObj) {[m
[31m-                const altName = settings.player_prefix + player_name;[m
[31m-                playerObj = agent.bot.players[altName];[m
[31m-                if (playerObj) {[m
[31m-                    console.log(`Fallback: Using alternate username "${altName}" for "${player_name}".`);[m
[31m-                    player_name = altName;[m
[31m-                }[m
[31m-            }[m
             await skills.giveToPlayer(agent.bot, item_name, player_name, num);[m
         })[m
     },[m
[36m@@ -326,19 +304,9 @@[m [mexport const actionsList = [[m
     {[m
         name: '!attackPlayer',[m
         description: 'Attack a specific player until they die or run away. Remember this is just a game and does not cause real life harm.',[m
[31m-        params: {'player_name': { type: 'string', description: 'The name of the player to attack.' }},[m
[32m+[m[32m        params: {'player_name': { type: 'string', description: 'The name of the player to attack.'}},[m
         perform: runAsAction(async (agent, player_name) => {[m
[31m-            // Fallback: if not found, try with the custom prefix from settings[m
[31m-            let playerObj = agent.bot.players[player_name];[m
[31m-            if (!playerObj) {[m
[31m-                const altName = settings.player_prefix + player_name;[m
[31m-                playerObj = agent.bot.players[altName];[m
[31m-                if (playerObj) {[m
[31m-                    console.log(`Fallback: Using alternate username "${altName}" for "${player_name}".`);[m
[31m-                    player_name = altName;[m
[31m-                }[m
[31m-            }[m
[31m-            let player = playerObj?.entity;[m
[32m+[m[32m            let player = agent.bot.players[player_name]?.entity;[m
             if (!player) {[m
                 skills.log(agent.bot, `Could not find player ${player_name}.`);[m
                 return false;[m
[36m@@ -394,8 +362,7 @@[m [mexport const actionsList = [[m
         },[m
         perform: async function (agent, prompt) {[m
             if (convoManager.inConversation()) {[m
[31m-                agent.self_prompter.setPrompt(prompt);[m
[31m-                convoManager.scheduleSelfPrompter();[m
[32m+[m[32m                agent.self_prompter.setPromptPaused(prompt);[m
             }[m
             else {[m
                 agent.self_prompter.start(prompt);[m
[36m@@ -407,7 +374,6 @@[m [mexport const actionsList = [[m
         description: 'Call when you have accomplished your goal. It will stop self-prompting and the current action. ',[m
         perform: async function (agent) {[m
             agent.self_prompter.stop();[m
[31m-            convoManager.cancelSelfPrompter();[m
             return 'Self-prompting stopped.';[m
         }[m
     },[m
[36m@@ -440,7 +406,7 @@[m [mexport const actionsList = [[m
             convoManager.endConversation(player_name);[m
             return `Converstaion with ${player_name} ended.`;[m
         }[m
[31m-    }[m
[32m+[m[32m    },[m
     // { // commented for now, causes confusion with goal command[m
     //     name: '!npcGoal',[m
     //     description: 'Set a simple goal for an item or building to automatically work towards. Do not use for complex goals.',[m
